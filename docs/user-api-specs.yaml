openapi: "3.0.0"
info:
  title: Roomy User API
  version: 1.0.0
  description: API for managing user entities

paths:
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              
  /users/{userId}:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
        description: The ID of the user to retrieve
    get:
      summary: Get a user by ID
      responses:
        '200':
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update a user by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user by ID
      responses:
        '204':
          description: User deleted
  /users/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
        '401':
          description: Unauthorized

  /users/logout:
    post:
      summary: User logout
      responses:
        '200':
          description: User logged out successfully
        '401':
          description: Unauthorized

  /users/change-password:
    post:
      summary: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Bad request, invalid parameters
        '401':
          description: Unauthorized

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        email:
          type: string
          format: email
        address:
          type: string
        previousPostings:
          type: string
        previouslyContacted:
          type: string
        hashedPassword:
          type: string
          format: password
        salt:
          type: string
